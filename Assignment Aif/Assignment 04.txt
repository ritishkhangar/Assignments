43. Check Armstrong Number for 3-digit number

package com.domain;

public class AmstrongNumber {

	public static void main(String[] args) 
	{
        int num = 153;   // store number
        int temp = num;  // take backup of the number
        int result = 0;  // to store result number:
        
        while(num>0)
        {
        	int last = num %10;
        	num = num / 10;
        	result = result + (last * last * last);
        }
        
        if(result == temp)
        {
        	System.out.println(temp + " is Amstrong number");
        }
        else
        {
        	System.out.println(temp + " is not Amstrong number");
        }
	}

}


Output- 
Ënter 3 Digit Number
126
126 is not an Armstrong number

Ënter 3 Digit Number
153
153 is an Armstrong number


** Process exited - Return Code: 0 **










44. Check Armstrong number for n digits

import java.util.Scanner;
public class Main{

    public static void main(String[] args) {

        int number = 456, originalNumber, remainder, result = 0, n = 0;

        originalNumber = number;

        for (;originalNumber != 0; originalNumber /= 10, ++n);

        originalNumber = number;

        for (;originalNumber != 0; originalNumber /= 10)
        {
            remainder = originalNumber % 10;
            result += Math.pow(remainder, n);
        }

        if(result == number)
            System.out.println(number + " is an Armstrong number.");
        else
            System.out.println(number + " is not an Armstrong number.");
    }
}

Output- 
456 is not an Armstrong number.


** Process exited - Return Code: 0 **









45. Armstrong Numbers Between Two Integers

public class Armstrong {
  public static void main(String[] args) {

    int low = 999, high = 99999;

    for(int number = low + 1; number < high; ++number) {
      int digits = 0;
      int result = 0;
      int originalNumber = number;

      while (originalNumber != 0) {
        originalNumber /= 10;
        ++digits;
      }

      originalNumber = number;

      while (originalNumber != 0) {
        int remainder = originalNumber % 10;
        result += Math.pow(remainder, digits);
        originalNumber /= 10;
      }

      if (result == number) {
        System.out.print(number + " ");
      }
    }
  }
}

o/p: 1634 8208 9474 54748 92727 93084 











46. Prime Numbers Between Two Integers

public class Prime {

    public static void main(String[] args) {

        int low = 20, high = 50;

        while (low < high) {
            boolean flag = false;

            for(int i = 2; i <= low/2; ++i) {
              
                if(low % i == 0) {
                    flag = true;
                    break;
                }
            }

            if (!flag && low != 0 && low != 1)
                System.out.print(low + " ");

            ++low;
        }
    }
}

o/p: 23 29 31 37 41 43 47 















47. Armstrong Numbers Between Two Integers

public class Armstrong {
  public static void main(String[] args) {

    int low = 999, high = 99999;

    for(int number = low + 1; number < high; ++number) {
      int digits = 0;
      int result = 0;
      int originalNumber = number;

      while (originalNumber != 0) {
        originalNumber /= 10;
        ++digits;
      }

      originalNumber = number;

      while (originalNumber != 0) {
        int remainder = originalNumber % 10;
        result += Math.pow(remainder, digits);
        originalNumber /= 10;
      }

      if (result == number) {
        System.out.print(number + " ");
      }
    }

o/p:1634 8208 9474 54748 92727 93084 








48. Factors of a Positive Integer

public class PositiveInt{

  public static void main(String[] args) {

    int number = 60;

    System.out.print("Factors of " + number + " are: ");

    for (int i = 1; i <= number; ++i) 
      {

      if (number % i == 0) {
        System.out.print(i + " ");
      }
    }
  }
}

o/p:Factors of 60 are: 1 2 3 4 5 6 10 12 15 20 30 60










49. Factors of Negative Number

public class NegativeNumber {

  public static void main(String[] args) {
    int number = -60;
    System.out.print("Factors of " + number + " are: ");

    for(int i = number; i <= Math.abs(number); ++i) {
      if(i == 0) {
        continue;
      }
      else {
        if (number % i == 0) {
          System.out.print(i + " ");
        }
      }
    }
  }
}

o/p:Factors of -60 are: -60 -30 -20 -15 -12 -10 -6 -5 -4 -3 -2 -1 1 2 3 4 5 6 10 12 15 20 30 60  












50. Simple Calculator using Java switch Statement

import java.util.Scanner;

public class Calculator {
  public static void main(String[] args) {

    char operator;
    Double number1, number2, result;

    Scanner input = new Scanner(System.in);

    System.out.println("Choose an operator: +, -, *, or /");
    operator = input.next().charAt(0);

    System.out.println("Enter first number");
    number1 = input.nextDouble();

    System.out.println("Enter second number");
    number2 = input.nextDouble();

    switch (operator) {

      case '+':
        result = number1 + number2;
        System.out.println(number1 + " + " + number2 + " = " + result);
        break;

      case '-':
        result = number1 - number2;
        System.out.println(number1 + " - " + number2 + " = " + result);
        break;

      case '*':
        result = number1 * number2;
        System.out.println(number1 + " * " + number2 + " = " + result);
        break;

      case '/':
        result = number1 / number2;
        System.out.println(number1 + " / " + number2 + " = " + result);
        break;

      default:
        System.out.println("Invalid operator!");
        break;
    }

    input.close();
  }
}

o/p:
Choose an operator: +, -, *, or /
*
Enter first number
3
Enter second number
9
3.0 * 9.0 = 27.
